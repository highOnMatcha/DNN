name: Pokemon Sprite Generation - Comprehensive Testing

# Trigger the workflow on push and pull requests to main branch
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Allow manual workflow dispatch
  workflow_dispatch:

jobs:
  # Unit Tests (Working Tests Only)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pokemon_sprites/requirements.txt
        pip install -r pokemon_sprites/tests/requirements-test.txt
    
    - name: Run unit tests with pytest
      run: |
        cd pokemon_sprites
        python -m pytest tests/unit/ -v --tb=short
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: test-results/

  # Code Coverage (runs after unit tests pass)
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pokemon_sprites/requirements.txt
        pip install -r pokemon_sprites/tests/requirements-test.txt
    
    - name: Run unit tests with coverage
      run: |
        cd pokemon_sprites
        python -m pytest tests/unit/ --cov=src --cov-report=xml --cov-report=html --cov-report=term --cov-fail-under=30
    
    - name: Check coverage threshold
      run: |
        cd pokemon_sprites
        coverage report --fail-under=30
        echo "Current coverage requirement: 30% (target: 50%)"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./pokemon_sprites/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: pokemon_sprites/htmlcov/

  # Integration Tests (Fixed and re-enabled)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pokemon_sprites/requirements.txt
        pip install -r pokemon_sprites/tests/requirements-test.txt
    
    - name: Run integration tests
      run: |
        cd pokemon_sprites
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  # Performance Tests (Fixed and re-enabled)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pokemon_sprites/requirements.txt
        pip install -r pokemon_sprites/tests/requirements-test.txt
    
    - name: Run performance tests
      run: |
        cd pokemon_sprites
        python -m pytest tests/performance/ -v --tb=short
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: test-results/

  # Comprehensive Test Suite (all working tests)
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pokemon_sprites/requirements.txt
        pip install -r pokemon_sprites/tests/requirements-test.txt
    
    - name: Run comprehensive test suite
      run: |
        cd pokemon_sprites
        python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=html --cov-report=term --cov-fail-under=30
    
    - name: Enforce coverage threshold
      run: |
        cd pokemon_sprites
        coverage report --fail-under=30
        echo "✅ Coverage requirement (30%+) satisfied - Target: 50%"
    
    - name: Generate test report
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "Comprehensive test suite completed!" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ✅" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results
        path: test-results/

  # Security and Quality Checks
  security-checks:
    name: Security and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

# Notifications and status checks
env:
  PYTHONPATH: ${{ github.workspace }}/src
